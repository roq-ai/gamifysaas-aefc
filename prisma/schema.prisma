generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model content {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String             @db.VarChar(255)
  description        String?            @db.VarChar(255)
  creator_id         String             @db.Uuid
  provider_id        String             @db.Uuid
  created_at         DateTime           @default(now()) @db.Timestamp(6)
  updated_at         DateTime           @default(now()) @db.Timestamp(6)
  user               user               @relation(fields: [creator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  education_provider education_provider @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  course             course[]
}

model course {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String             @db.VarChar(255)
  description        String?            @db.VarChar(255)
  provider_id        String             @db.Uuid
  content_id         String             @db.Uuid
  created_at         DateTime           @default(now()) @db.Timestamp(6)
  updated_at         DateTime           @default(now()) @db.Timestamp(6)
  content            content            @relation(fields: [content_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  education_provider education_provider @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student            student[]
  student_course     student_course[]
}

model education_provider {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  content     content[]
  course      course[]
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model student {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String           @db.Uuid
  course_id      String           @db.Uuid
  progress       Int              @default(0)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  course         course           @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student_course student_course[]
}

model student_course {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  student_id String   @db.Uuid
  course_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  course     course   @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  student    student  @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String               @unique @db.VarChar(255)
  firstName          String?              @db.VarChar(255)
  lastName           String?              @db.VarChar(255)
  roq_user_id        String               @db.VarChar(255)
  tenant_id          String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  content            content[]
  education_provider education_provider[]
  student            student[]
}
